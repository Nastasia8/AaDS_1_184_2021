def build(v,l,r, segm_tree, nums):
    if r-l==1:
        segm_tree[v]=[nums[l],l]
        return 
    m = (r+l)//2
    build(2*v+1, l, m, segm_tree, nums )
    build(2*v+2, m, r, segm_tree, nums )
    segm_tree[v]=max(segm_tree[2*v+1], segm_tree[2*v+2])
def getMax(v,l,r, segm_tree, ql, qr):
    if ql<=l and qr>=r:
        return segm_tree[v]
    if ql>=r or qr<=l:
        return [-1e9,-1]
    m=(r+l)//2
    st_l=getMax(2*v+1, l, m, segm_tree, ql,qr)
    st_r=getMax(2*v+2, m, r, segm_tree, ql,qr)
    return max(st_l,st_r)
def update(v,l,r, segm_tree, indx, value):
    if r-l==1:
        segm_tree[v][0]=value
        return
    m=(l+r)//2
    if indx<m:
        update(2*v+1, l, m, segm_tree, indx, value)
    else:
        update(2*v+2, m, r, segm_tree, indx, value)
    segm_tree[v]=max(segm_tree[2*v+1], segm_tree[2*v+2])
 
 
def main():
    n=int(input())
    numbers=list(map(int, input().split()))[:n]
    segment_tree=[0]*4*n
    build(0,0, n, segment_tree, numbers)
    q=int(input())
    arr=[]
    while q!=0:
        type_q, l,r = map(str, input().split())
        if type_q=="s":
            arr.append(getMax(0, 0, n, segment_tree, int(l)-1, int(r)))
        else:
            update(0,0, n, segment_tree, int(l)-1, int(r)) #l-индекс, r - значение
        q-=1
    [print(i[1]+1, end=" ") for i in arr]
main()